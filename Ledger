from xrpl.clients import JsonRpcClient
from xrpl.wallet import Wallet
from xrpl.models.transactions import Payment, AccountSet
from xrpl.transaction import sign_and_submit_transaction
from xrpl.models.requests import AccountInfo
from xrpl.ledger import get_latest_validated_ledger_sequence
import time

# Constants
JSON_RPC_URL = "https://s.altnet.rippletest.net:51234/"  # Testnet URL
client = JsonRpcClient(JSON_RPC_URL)

# Generate a new wallet (for demonstration purposes)
wallet = Wallet.create()

print("New Wallet Address:", wallet.classic_address)
print("New Wallet Seed:", wallet.seed)

# Fund the wallet using XRPL Testnet Faucet (manual step required)
print("Please fund your wallet using the Testnet faucet: https://xrpl.org/xrp-testnet-faucet.html")
input("Press Enter after funding your wallet...")

# Check account balance
def get_account_balance(address):
    account_info = AccountInfo(
        account=address,
        ledger_index="validated"
    )
    response = client.request(account_info)
    if response.is_successful():
        balance = response.result["account_data"]["Balance"]
        print(f"Balance for {address}: {balance} drops")
        return balance
    else:
        print("Failed to fetch account info.")
        return None

# Create a custom transaction (for example, a payment)
def create_payment(destination, amount):
    payment = Payment(
        account=wallet.classic_address,
        amount=str(amount),
        destination=destination
    )
    signed_tx = sign_and_submit_transaction(payment, wallet, client)
    print("Transaction Result:", signed_tx.result)
    return signed_tx.result

# Set account settings (optional)
def set_account_settings():
    account_set = AccountSet(
        account=wallet.classic_address,
        transfer_rate=1000000000  # Example: No transfer fee
    )
    signed_tx = sign_and_submit_transaction(account_set, wallet, client)
    print("AccountSet Transaction Result:", signed_tx.result)
    return signed_tx.result

if __name__ == "__main__":
    print("Fetching initial balance...")
    get_account_balance(wallet.classic_address)

    # Example transaction: Payment
    print("Creating a payment transaction...")
    destination_address = input("Enter the destination address: ")
    amount = int(input("Enter the amount in drops (1 XRP = 1,000,000 drops): "))
    create_payment(destination_address, amount)

    # Set account settings
    print("Setting account settings...")
    set_account_settings()

    print("Final balance:")
    get_account_balance(wallet.classic_address)
